{"version":3,"sources":["redux/shop/shop.actions.js","pages/shoppage/shoppage.component.jsx"],"names":["fetchCollectionStartAsync","dispatch","console","log","type","ShopActionTypes","FETCH_COLLECTIONS_START","firestore","collection","get","then","snapshot","collectionMap","convertCollectionSnapshotsToMap","FETCH_COLLECTIONS_SUCCESS","payload","fetchCollectionsSuccess","catch","error","errorMessage","FETCH_COLLECTIONS_FAILURE","CollectionOverviewContainer","lazy","CollectionPageContainer","connect","match","useEffect","className","fallback","exact","path","component"],"mappings":"iMA6CeA,EA5BmB,WAC9B,OAAO,SAAAC,GACHC,QAAQC,IAAI,kBAWZF,EA3B6B,CACjCG,KAAMC,IAAgBC,0BA2BIC,IAAUC,WAAW,eAK7BC,MAAMC,MAAK,SAAAC,GACrB,IAAMC,EAAgBC,YAAgCF,GAEtDV,EAhCoB,SAACW,GAAD,MAAoB,CAChDR,KAAMC,IAAgBS,0BACtBC,QAASH,GA8BQI,CAAwBJ,OAClCK,OAAM,SAAAC,GA5Be,IAACC,EA4BLlB,GA5BKkB,EA4B4BD,EA5BV,CAC/Cd,KAAMC,IAAgBe,0BACtBL,QAASI,UCNPE,EAA4BC,gBAAK,kBAAI,iCACrCC,EAAwBD,gBAAK,kBAAI,iCAyBxBE,sBAAQ,MAJI,SAAAvB,GAAQ,MAAK,CACpCD,0BAA2B,kBAAMC,EAASD,SAG/BwB,EAvBE,SAAC,GAA0C,IAAxCxB,EAAuC,EAAvCA,0BAA2ByB,EAAY,EAAZA,MAM3C,OAJAC,qBAAU,WACN1B,MACD,CAACA,IAGA,yBAAK2B,UAAU,aACX,kBAAC,IAAD,KACA,kBAAC,WAAD,CAAUC,SAAU,kBAAC,IAAD,OAChB,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAI,UAAKL,EAAMK,MAAQC,UAAWV,IAC/C,kBAAC,IAAD,CAAOS,KAAI,UAAKL,EAAMK,KAAX,kBAAiCC,UAAWR","file":"static/js/9.418fee5c.chunk.js","sourcesContent":["import ShopActionTypes from './shop.types';\nimport {firestore,convertCollectionSnapshotsToMap} from '../../firebase/firebase.utils';\n\nconst fetchCollectionsStart = () => ({\n    type: ShopActionTypes.FETCH_COLLECTIONS_START\n})\n\nconst fetchCollectionsSuccess = (collectionMap) => ({\n    type: ShopActionTypes.FETCH_COLLECTIONS_SUCCESS,\n    payload: collectionMap\n})\n\nconst fetchCollectionsFailure = (errorMessage) => ({\n    type: ShopActionTypes.FETCH_COLLECTIONS_FAILURE,\n    payload: errorMessage\n})\n\nconst fetchCollectionStartAsync = () => {\n    return dispatch => {\n        console.log(\"Starting Async\");\n        // Below way of using OnSnapshot gets subscribed to observable everytime there is a change in the collection\n        // this.unSubscribeFromSnapshot = colletionRef.onSnapshot(async snapshot => {\n        //     const collectionMap = convertCollectionSnapshotsToMap(snapshot);\n        //     updateCollections(collectionMap);\n        //     console.log('UpdatedCollections')\n        //     this.setState({ loading: false });\n        // })\n\n        // Below way of using get() is called only when componentDidMount() is invoked and only one time\n        // Returns a promise\n        dispatch(fetchCollectionsStart());\n        const collectionRef = firestore.collection('collections');\n\n        // Once function gets called, set loading to true\n        \n\n        collectionRef.get().then(snapshot => {\n            const collectionMap = convertCollectionSnapshotsToMap(snapshot);\n            // Once Collection is received, dispatch the result :collections\n            dispatch(fetchCollectionsSuccess(collectionMap));\n        }).catch(error => { dispatch(fetchCollectionsFailure(error)) });\n\n    }\n}\n\nexport default fetchCollectionStartAsync;","import React, { useEffect, lazy, Suspense } from 'react';\nimport { connect } from 'react-redux';\nimport { Route } from 'react-router-dom';\nimport Spinner from '../../components/spinner/spinner.component';\nimport ErrorBoundary from '../../components/error-boundaries/error-boundaries.component';\nimport fetchCollectionStartAsync from '../../redux/shop/shop.actions';\n\n\nconst CollectionOverviewContainer=lazy(()=>import('../../components/collection-overview/collection-overview.container'));\nconst CollectionPageContainer=lazy(()=>import('../collection/collection.container'));\n\nconst ShopPage = ({ fetchCollectionStartAsync, match }) => {\n\n    useEffect(() => {\n        fetchCollectionStartAsync();\n    }, [fetchCollectionStartAsync])\n\n    return (\n        <div className='shop-page'>\n            <ErrorBoundary>\n            <Suspense fallback={<Spinner />}>\n                <Route exact path={`${match.path}`} component={CollectionOverviewContainer} />\n                <Route path={`${match.path}/:collectionId`} component={CollectionPageContainer} />\n            </Suspense>\n            </ErrorBoundary>\n        </div>\n    )\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n    fetchCollectionStartAsync: () => dispatch(fetchCollectionStartAsync())\n});\n\nexport default connect(null, mapDispatchToProps)(ShopPage);"],"sourceRoot":""}