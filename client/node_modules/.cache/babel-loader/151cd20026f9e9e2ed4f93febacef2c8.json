{"ast":null,"code":"var _jsxFileName = \"/Users/balasr/Documents/Bala/Pers/ReactApp/App2-Ecommerce/crown-clothing/src/pages/shoppage/shoppage.component.jsx\";\nimport React from 'react';\nimport CollectionOverview from '../../components/collection-overview/collection-overview.component';\nimport CollectionPage from '../collection/collection.component';\nimport { firestore, convertCollectionSnapshotsToMap } from '../../firebase/firebase.utils';\nimport { connect } from 'react-redux';\nimport updateCollections from '../../redux/shop/shop.actions';\nimport WithSpinner from '../../components/with-spinner/with-spinner.component';\nimport { Route } from 'react-router-dom';\nconst CollectionOverviewWithSpinner = WithSpinner(CollectionOverview);\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\nclass ShopPage extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: true\n    };\n    this.unSubscribeFromSnapshot = null;\n  }\n\n  componentDidMount() {\n    const {\n      updateCollections\n    } = this.props;\n    const colletionRef = firestore.collection('collections'); // Below way of using OnSnapshot gets subscribed to observable everytime there is a change in the collection\n    // this.unSubscribeFromSnapshot = colletionRef.onSnapshot(async snapshot => {\n    //     const collectionMap = convertCollectionSnapshotsToMap(snapshot);\n    //     updateCollections(collectionMap);\n    //     console.log('UpdatedCollections')\n    //     this.setState({ loading: false });\n    // })\n    // Below way of using get() is called only when componentDidMount() is invoked and only one time\n    // Returns a promise\n\n    setTimeout(colletionRef.get().then(snapshot => {\n      const collectionMap = convertCollectionSnapshotsToMap(snapshot);\n      updateCollections(collectionMap);\n      console.log('UpdatedCollections');\n      this.setState({\n        loading: false\n      });\n    }));\n  }\n\n  render() {\n    const {\n      match\n    } = this.props;\n    const {\n      loading\n    } = this.state;\n    console.log(\"Isloading :\" + loading);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"shop-page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: `${match.path}`,\n      render: props => /*#__PURE__*/React.createElement(CollectionOverviewWithSpinner, Object.assign({\n        isloading: loading\n      }, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 72\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: `${match.path}/:collectionId`,\n      render: props => /*#__PURE__*/React.createElement(CollectionPageWithSpinner, Object.assign({\n        isloading: loading\n      }, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 80\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  updateCollections: collectionMap => dispatch(updateCollections(collectionMap))\n});\n\nexport default connect(null, mapDispatchToProps)(ShopPage);","map":{"version":3,"sources":["/Users/balasr/Documents/Bala/Pers/ReactApp/App2-Ecommerce/crown-clothing/src/pages/shoppage/shoppage.component.jsx"],"names":["React","CollectionOverview","CollectionPage","firestore","convertCollectionSnapshotsToMap","connect","updateCollections","WithSpinner","Route","CollectionOverviewWithSpinner","CollectionPageWithSpinner","ShopPage","Component","state","loading","unSubscribeFromSnapshot","componentDidMount","props","colletionRef","collection","setTimeout","get","then","snapshot","collectionMap","console","log","setState","render","match","path","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,kBAAP,MAA+B,oEAA/B;AACA,OAAOC,cAAP,MAA2B,oCAA3B;AACA,SAASC,SAAT,EAAoBC,+BAApB,QAA2D,+BAA3D;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,iBAAP,MAA8B,+BAA9B;AACA,OAAOC,WAAP,MAAwB,sDAAxB;AACA,SAASC,KAAT,QAAsB,kBAAtB;AAEA,MAAMC,6BAA6B,GAAGF,WAAW,CAACN,kBAAD,CAAjD;AACA,MAAMS,yBAAyB,GAAGH,WAAW,CAACL,cAAD,CAA7C;;AAEA,MAAMS,QAAN,SAAuBX,KAAK,CAACY,SAA7B,CAAuC;AAAA;AAAA;AAAA,SAEnCC,KAFmC,GAE3B;AACJC,MAAAA,OAAO,EAAE;AADL,KAF2B;AAAA,SAMnCC,uBANmC,GAMT,IANS;AAAA;;AAQnCC,EAAAA,iBAAiB,GAAG;AAChB,UAAM;AAAEV,MAAAA;AAAF,QAAwB,KAAKW,KAAnC;AACA,UAAMC,YAAY,GAAGf,SAAS,CAACgB,UAAV,CAAqB,aAArB,CAArB,CAFgB,CAIhB;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEAC,IAAAA,UAAU,CACVF,YAAY,CAACG,GAAb,GAAmBC,IAAnB,CAAwBC,QAAQ,IAAI;AAChC,YAAMC,aAAa,GAAGpB,+BAA+B,CAACmB,QAAD,CAArD;AACAjB,MAAAA,iBAAiB,CAACkB,aAAD,CAAjB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACA,WAAKC,QAAL,CAAc;AAAEb,QAAAA,OAAO,EAAE;AAAX,OAAd;AACH,KALD,CADU,CAAV;AASH;;AAGDc,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEC,MAAAA;AAAF,QAAY,KAAKZ,KAAvB;AACA,UAAM;AAAEH,MAAAA;AAAF,QAAc,KAAKD,KAAzB;AACAY,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAgBZ,OAA5B;AACA,wBACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAG,GAAEe,KAAK,CAACC,IAAK,EAAjC;AAAoC,MAAA,MAAM,EAAGb,KAAD,iBAAW,oBAAC,6BAAD;AAA+B,QAAA,SAAS,EAAEH;AAA1C,SAAuDG,KAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAEI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAG,GAAEY,KAAK,CAACC,IAAK,gBAA3B;AAA4C,MAAA,MAAM,EAAGb,KAAD,iBAAW,oBAAC,yBAAD;AAA2B,QAAA,SAAS,EAAEH;AAAtC,SAAmDG,KAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CADJ;AAMH;;AA7CkC;;AAiDvC,MAAMc,kBAAkB,GAAGC,QAAQ,KAAK;AACpC1B,EAAAA,iBAAiB,EAAEkB,aAAa,IAAIQ,QAAQ,CAAC1B,iBAAiB,CAACkB,aAAD,CAAlB;AADR,CAAL,CAAnC;;AAIA,eAAenB,OAAO,CAAC,IAAD,EAAO0B,kBAAP,CAAP,CAAkCpB,QAAlC,CAAf","sourcesContent":["import React from 'react';\nimport CollectionOverview from '../../components/collection-overview/collection-overview.component';\nimport CollectionPage from '../collection/collection.component';\nimport { firestore, convertCollectionSnapshotsToMap } from '../../firebase/firebase.utils';\nimport { connect } from 'react-redux';\nimport updateCollections from '../../redux/shop/shop.actions';\nimport WithSpinner from '../../components/with-spinner/with-spinner.component';\nimport { Route } from 'react-router-dom';\n\nconst CollectionOverviewWithSpinner = WithSpinner(CollectionOverview);\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\nclass ShopPage extends React.Component {\n\n    state = {\n        loading: true\n    }\n\n    unSubscribeFromSnapshot = null;\n\n    componentDidMount() {\n        const { updateCollections } = this.props;\n        const colletionRef = firestore.collection('collections');\n\n        // Below way of using OnSnapshot gets subscribed to observable everytime there is a change in the collection\n        // this.unSubscribeFromSnapshot = colletionRef.onSnapshot(async snapshot => {\n        //     const collectionMap = convertCollectionSnapshotsToMap(snapshot);\n        //     updateCollections(collectionMap);\n        //     console.log('UpdatedCollections')\n        //     this.setState({ loading: false });\n        // })\n\n        // Below way of using get() is called only when componentDidMount() is invoked and only one time\n        // Returns a promise\n\n        setTimeout(\n        colletionRef.get().then(snapshot => {\n            const collectionMap = convertCollectionSnapshotsToMap(snapshot);\n            updateCollections(collectionMap);\n            console.log('UpdatedCollections')\n            this.setState({ loading: false });\n        }));\n\n\n    }\n\n\n    render() {\n        const { match } = this.props;\n        const { loading } = this.state;\n        console.log(\"Isloading :\" + loading);\n        return (\n            <div className='shop-page'>\n                <Route exact path={`${match.path}`} render={(props) => <CollectionOverviewWithSpinner isloading={loading} {...props} />} />\n                <Route path={`${match.path}/:collectionId`} render={(props) => <CollectionPageWithSpinner isloading={loading} {...props} />} />\n            </div>\n        )\n    }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n    updateCollections: collectionMap => dispatch(updateCollections(collectionMap))\n})\n\nexport default connect(null, mapDispatchToProps)(ShopPage);"]},"metadata":{},"sourceType":"module"}