{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore';\nvar firebaseConfig = {\n  apiKey: \"AIzaSyAwYNSCbedJzs-saJg0txpcxeeSEcISNxA\",\n  authDomain: \"crown-db-7e544.firebaseapp.com\",\n  databaseURL: \"https://crown-db-7e544.firebaseio.com\",\n  projectId: \"crown-db-7e544\",\n  storageBucket: \"crown-db-7e544.appspot.com\",\n  messagingSenderId: \"275203310086\",\n  appId: \"1:275203310086:web:6fda39c7495ccfc98b3987\",\n  measurementId: \"G-MZ2QREYFCB\"\n};\nexport const CreateUserProfile = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\nfirebase.initializeApp(firebaseConfig);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nvar provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const SignInWithGoogle = () => firebase.auth().signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["/Users/balasr/Documents/Bala/Pers/ReactApp/App2-Ecommerce/crown-clothing/src/firebase/firebase.utils.js"],"names":["firebase","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","CreateUserProfile","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","SignInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,eAAP;AACA,OAAO,oBAAP;AAEA,IAAIC,cAAc,GAAG;AAEjBC,EAAAA,MAAM,EAAE,yCAFS;AAGjBC,EAAAA,UAAU,EAAE,gCAHK;AAIjBC,EAAAA,WAAW,EAAE,uCAJI;AAKjBC,EAAAA,SAAS,EAAE,gBALM;AAMjBC,EAAAA,aAAa,EAAE,4BANE;AAOjBC,EAAAA,iBAAiB,EAAE,cAPF;AAQjBC,EAAAA,KAAK,EAAE,2CARU;AASjBC,EAAAA,aAAa,EAAE;AATE,CAArB;AAaA,OAAO,MAAMC,iBAAiB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AACjE,MAAI,CAACD,QAAL,EAAe;AAEf,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,GAAI,EAApC,CAAhB;AAEA,QAAMC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,GAAR,EAAvB;;AAEA,MAAI,CAACD,QAAQ,CAACE,MAAd,EAAsB;AACpB,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAAyBV,QAA/B;AACA,UAAMW,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AACA,QAAI;AACF,YAAMV,OAAO,CAACW,GAAR,CAAY;AAChBJ,QAAAA,WADgB;AAEhBC,QAAAA,KAFgB;AAGhBC,QAAAA,SAHgB;AAIhB,WAAGV;AAJa,OAAZ,CAAN;AAMD,KAPD,CAOE,OAAOa,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCF,KAAK,CAACG,OAAzC;AACD;AACF;;AAED,SAAOf,OAAP;AACD,CAvBI;AAyBPb,QAAQ,CAAC6B,aAAT,CAAuB5B,cAAvB;AACA,OAAO,MAAM6B,IAAI,GAAC9B,QAAQ,CAAC8B,IAAT,EAAX;AACP,OAAO,MAAMhB,SAAS,GAACd,QAAQ,CAACc,SAAT,EAAhB;AAEP,IAAIiB,QAAQ,GAAG,IAAI/B,QAAQ,CAAC8B,IAAT,CAAcE,kBAAlB,EAAf;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAACC,EAAAA,MAAM,EAAC;AAAR,CAA7B;AACA,OAAO,MAAMC,gBAAgB,GAAC,MAAInC,QAAQ,CAAC8B,IAAT,GAAgBM,eAAhB,CAAgCL,QAAhC,CAA3B;AAEP,eAAe/B,QAAf","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore';\n\nvar firebaseConfig = {\n\n    apiKey: \"AIzaSyAwYNSCbedJzs-saJg0txpcxeeSEcISNxA\",\n    authDomain: \"crown-db-7e544.firebaseapp.com\",\n    databaseURL: \"https://crown-db-7e544.firebaseio.com\",\n    projectId: \"crown-db-7e544\",\n    storageBucket: \"crown-db-7e544.appspot.com\",\n    messagingSenderId: \"275203310086\",\n    appId: \"1:275203310086:web:6fda39c7495ccfc98b3987\",\n    measurementId: \"G-MZ2QREYFCB\"\n\n}\n\nexport const CreateUserProfile = async (userAuth, additionalData) => {\n    if (!userAuth) return;\n  \n    const userRef = firestore.doc(`users/${userAuth.uid}`);\n  \n    const snapShot = await userRef.get();\n  \n    if (!snapShot.exists) {\n      const { displayName, email } = userAuth;\n      const createdAt = new Date();\n      try {\n        await userRef.set({\n          displayName,\n          email,\n          createdAt,\n          ...additionalData\n        });\n      } catch (error) {\n        console.log('error creating user', error.message);\n      }\n    }\n  \n    return userRef;\n  };\n\nfirebase.initializeApp(firebaseConfig);\nexport const auth=firebase.auth();\nexport const firestore=firebase.firestore();\n\nvar provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({prompt:'select_account'});\nexport const SignInWithGoogle=()=>firebase.auth().signInWithPopup(provider);\n\nexport default firebase;"]},"metadata":{},"sourceType":"module"}