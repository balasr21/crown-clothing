{"ast":null,"code":"import ShopActionTypes from './shop.types';\n\nconst fetchCollectionsStart = () => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_START\n});\n\nconst fetchCollectionsSuccess = collectionMap => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_SUCCESS,\n  payload: collectionMap\n});\n\nconst fetchCollectionsFailure = errorMessage => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_FAILURE,\n  payload: errorMessage\n});\n\nconst fetchCollectionStartAsync = () => {\n  return dispatch => {\n    const collectionRef = firestore.collection('collections'); // Once function gets called, set loading to true\n\n    dispatch(fetchCollectionsStart());\n    collectionRef.get().then(snapshot => {\n      const collectionMap = convertCollectionSnapshotsToMap(snapshot); // Once Collection is received, dispatch the result :collections\n\n      dispatch(fetchCollectionsSuccess(collectionMap));\n    }).catch(error => {\n      dispatch(fetchCollectionsFailure(error));\n    });\n  };\n};\n\nexport default updateCollections;","map":{"version":3,"sources":["/Users/balasr/Documents/Bala/Pers/ReactApp/App2-Ecommerce/crown-clothing/src/redux/shop/shop.actions.js"],"names":["ShopActionTypes","fetchCollectionsStart","type","FETCH_COLLECTIONS_START","fetchCollectionsSuccess","collectionMap","FETCH_COLLECTIONS_SUCCESS","payload","fetchCollectionsFailure","errorMessage","FETCH_COLLECTIONS_FAILURE","fetchCollectionStartAsync","dispatch","collectionRef","firestore","collection","get","then","snapshot","convertCollectionSnapshotsToMap","catch","error","updateCollections"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,cAA5B;;AAEA,MAAMC,qBAAqB,GAAG,OAAO;AACjCC,EAAAA,IAAI,EAAEF,eAAe,CAACG;AADW,CAAP,CAA9B;;AAIA,MAAMC,uBAAuB,GAAIC,aAAD,KAAoB;AAChDH,EAAAA,IAAI,EAAEF,eAAe,CAACM,yBAD0B;AAEhDC,EAAAA,OAAO,EAAEF;AAFuC,CAApB,CAAhC;;AAKA,MAAMG,uBAAuB,GAAIC,YAAD,KAAmB;AAC/CP,EAAAA,IAAI,EAAEF,eAAe,CAACU,yBADyB;AAE/CH,EAAAA,OAAO,EAAEE;AAFsC,CAAnB,CAAhC;;AAKA,MAAME,yBAAyB,GAAG,MAAM;AACpC,SAAOC,QAAQ,IAAI;AAEf,UAAMC,aAAa,GAAGC,SAAS,CAACC,UAAV,CAAqB,aAArB,CAAtB,CAFe,CAIf;;AACAH,IAAAA,QAAQ,CAACX,qBAAqB,EAAtB,CAAR;AAEAY,IAAAA,aAAa,CAACG,GAAd,GAAoBC,IAApB,CAAyBC,QAAQ,IAAI;AACjC,YAAMb,aAAa,GAAGc,+BAA+B,CAACD,QAAD,CAArD,CADiC,CAGjC;;AACAN,MAAAA,QAAQ,CAACR,uBAAuB,CAACC,aAAD,CAAxB,CAAR;AACH,KALD,EAKGe,KALH,CAKSC,KAAK,IAAI;AAAET,MAAAA,QAAQ,CAACJ,uBAAuB,CAACa,KAAD,CAAxB,CAAR;AAA0C,KAL9D;AAOH,GAdD;AAeH,CAhBD;;AAkBA,eAAeC,iBAAf","sourcesContent":["import ShopActionTypes from './shop.types';\n\nconst fetchCollectionsStart = () => ({\n    type: ShopActionTypes.FETCH_COLLECTIONS_START\n})\n\nconst fetchCollectionsSuccess = (collectionMap) => ({\n    type: ShopActionTypes.FETCH_COLLECTIONS_SUCCESS,\n    payload: collectionMap\n})\n\nconst fetchCollectionsFailure = (errorMessage) => ({\n    type: ShopActionTypes.FETCH_COLLECTIONS_FAILURE,\n    payload: errorMessage\n})\n\nconst fetchCollectionStartAsync = () => {\n    return dispatch => {\n\n        const collectionRef = firestore.collection('collections');\n\n        // Once function gets called, set loading to true\n        dispatch(fetchCollectionsStart());\n\n        collectionRef.get().then(snapshot => {\n            const collectionMap = convertCollectionSnapshotsToMap(snapshot);\n\n            // Once Collection is received, dispatch the result :collections\n            dispatch(fetchCollectionsSuccess(collectionMap));\n        }).catch(error => { dispatch(fetchCollectionsFailure(error)) });\n\n    }\n}\n\nexport default updateCollections;"]},"metadata":{},"sourceType":"module"}