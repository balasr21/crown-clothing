{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore';\nvar firebaseConfig = {\n  apiKey: \"AIzaSyAwYNSCbedJzs-saJg0txpcxeeSEcISNxA\",\n  authDomain: \"crown-db-7e544.firebaseapp.com\",\n  databaseURL: \"https://crown-db-7e544.firebaseio.com\",\n  projectId: \"crown-db-7e544\",\n  storageBucket: \"crown-db-7e544.appspot.com\",\n  messagingSenderId: \"275203310086\",\n  appId: \"1:275203310086:web:6fda39c7495ccfc98b3987\",\n  measurementId: \"G-MZ2QREYFCB\"\n};\nexport const CreateUserProfile = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapshot = await userRef.get();\n\n  if (!snapshot.exists) {\n    // Create User Profile\n    console.log(\"Creating Profile\");\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log(\"Error in saving user profile [{}]\", error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const addCollectionAndDocuments = async (collectionKey, collectionItems) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  collectionItems.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  await batch.commit();\n};\nexport const convertCollectionSnapshotsToMap = collections => {\n  const transformedCollections = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    console.log(\"items\" + items);\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  return transformedCollections.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\nfirebase.initializeApp(firebaseConfig);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const SignInWithGoogle = () => firebase.auth().signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["/Users/balasr/Documents/Bala/Pers/ReactApp/App2-Ecommerce/crown-clothing/src/firebase/firebase.utils.js"],"names":["firebase","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","CreateUserProfile","userAuth","additionalData","userRef","firestore","doc","uid","snapshot","get","exists","console","log","displayName","email","createdAt","Date","set","error","message","addCollectionAndDocuments","collectionKey","collectionItems","collectionRef","collection","batch","forEach","obj","newDocRef","commit","convertCollectionSnapshotsToMap","collections","transformedCollections","docs","map","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","accumulator","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","SignInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore';\n\nvar firebaseConfig = {\n\n    apiKey: \"AIzaSyAwYNSCbedJzs-saJg0txpcxeeSEcISNxA\",\n    authDomain: \"crown-db-7e544.firebaseapp.com\",\n    databaseURL: \"https://crown-db-7e544.firebaseio.com\",\n    projectId: \"crown-db-7e544\",\n    storageBucket: \"crown-db-7e544.appspot.com\",\n    messagingSenderId: \"275203310086\",\n    appId: \"1:275203310086:web:6fda39c7495ccfc98b3987\",\n    measurementId: \"G-MZ2QREYFCB\"\n\n}\n\nexport const CreateUserProfile = async (userAuth, additionalData) => {\n\n    if (!userAuth) return;\n\n    const userRef = firestore.doc(`users/${userAuth.uid}`);\n\n    const snapshot = await userRef.get();\n\n    if (!snapshot.exists) {\n        // Create User Profile\n        console.log(\"Creating Profile\")\n        const { displayName, email } = userAuth;\n        const createdAt = new Date();\n\n        try {\n            await userRef.set({\n                displayName,\n                email,\n                createdAt,\n                ...additionalData\n            });\n        } catch (error) {\n            console.log(\"Error in saving user profile [{}]\", error.message);\n        }\n\n\n    }\n    return userRef;\n}\n\nexport const addCollectionAndDocuments=async (collectionKey,collectionItems)=>{\n    const collectionRef=firestore.collection(collectionKey);\n\n    const batch=firestore.batch();\n\n    collectionItems.forEach(obj=>{\n        const newDocRef=collectionRef.doc();\n        batch.set(newDocRef,obj);    \n    })\n\n    await batch.commit();\n}\n\n\nexport const convertCollectionSnapshotsToMap=(collections)=>{\n    const transformedCollections=collections.docs.map(\n        doc=>{\n            const {title,items}=doc.data();\n            console.log(\"items\"+items);\n            return {\n                routeName:encodeURI(title.toLowerCase()),\n                id:doc.id,\n                title,\n                items\n            }\n        }\n    )\n\n    return transformedCollections.reduce((accumulator,collection)=>{\n        accumulator[collection.title.toLowerCase()]=collection;\n        return accumulator;\n    },{})\n\n}\n\nfirebase.initializeApp(firebaseConfig);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({ prompt: 'select_account' });\nexport const SignInWithGoogle = () => firebase.auth().signInWithPopup(provider);\n\nexport default firebase;"]},"metadata":{},"sourceType":"module"}